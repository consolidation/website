import{_ as a,c as n,o as i,ah as e}from"./chunks/framework.DeYX_sqr.js";const c=JSON.parse('{"title":"Extending","description":"","frontmatter":{},"headers":[],"relativePath":"extending.md","filePath":"extending.md"}'),t={name:"extending.md"};function p(l,s,o,h,r,k){return i(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="extending" tabindex="-1">Extending <a class="header-anchor" href="#extending" aria-label="Permalink to “Extending”">​</a></h1><p>Robo tasks can be added to your Robo application by using Composer to suppliment the set of built-in tasks that Robo provides by default. To find existing Robo task extensions, search in Packagist for projects of type <a href="https://packagist.org/search/?type=robo-tasks" target="_blank" rel="noreferrer">robo-tasks</a>.</p><p>The convention used to add new tasks for use in your RoboFiles is to create a wrapper trait named <code>Tasks</code> in your namespace that instantiates the implementation class for each task. Each task method in the trait should start with the prefix <code>task</code>, and should use <strong>chained method calls</strong> for configuration. Task execution should be triggered by the method <code>run</code>.</p><p>To include additional tasks in your RoboFile, you must <code>use</code> the appropriate <code>Tasks</code> in your RoboFile. See the section <a href="#including-additional-tasks">Including Additional Tasks</a> below. To create your own Robo extension that provides tasks for use in RoboFiles, then you must write your own class that implements TaskInterface, and create a <code>Tasks</code> trait for it as described in the section <a href="#creating-a-robo-extension">Creating a Robo Extension</a>.</p><p>Note: The <code>Tasks</code> traits are called <code>loadTasks</code> in Robo core. This is a legacy name, preserved for backwards compatibility purposes. These traits will all be renamed to <code>Tasks</code> in Robo 2.0.</p><h2 id="including-additional-tasks" tabindex="-1">Including Additional Tasks <a class="header-anchor" href="#including-additional-tasks" aria-label="Permalink to “Including Additional Tasks”">​</a></h2><p>Additional tasks may be installed into projects that have included Robo via Composer. For example:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>$ cd myproject</span></span>
<span class="line"><span>$ composer require boedah/robo-drush</span></span></code></pre></div><p>If any of the tasks you include require external Composer projects themselves, then you must <code>composer require</code> these as well. See the <code>suggests</code> section of Robo&#39;s composer.json file for a list of some projects you might need to require.</p><p>Once the extension you wish to use has been added to your vendor directory, you may then include it from your RoboFile:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RoboFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Robo\\</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tasks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Boedah\\Robo\\Task\\Drush\\Tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConsoleIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $io)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Once you have done this, all of the tasks defined in the extension you selected will be available for use in your commands.</p><p>Note that at the moment, it is not possible to extend Robo when using the robo.phar. This capability may be added in the future via <a href="https://github.com/dflydev/dflydev-embedded-composer" target="_blank" rel="noreferrer">embedded composer</a>.</p><h2 id="register-command-files-via-psr-4-autoloading" tabindex="-1">Register command files via PSR-4 autoloading <a class="header-anchor" href="#register-command-files-via-psr-4-autoloading" aria-label="Permalink to “Register command files via PSR-4 autoloading”">​</a></h2><p>You can have your project expose extra Robo command files by providing them within your project&#39;s PSR-4 namespace.</p><p>For example, given the following PSR-4 namespace in your <code>composer.json</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;autoload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;psr-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;MyProject\\\\&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Extra command files can be exposed by creating one or more classes under <code>./src/Robo/Plugin/Commands</code>, as shown in the example below:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyProject\\Robo\\Plugin\\Commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Robo\\Symfony\\ConsoleIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomCommands</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Robo\\</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tasks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * @command my-project:command-one</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commandOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConsoleIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $io) { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * @command my-project:command-two</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commandTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConsoleIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $io) { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Please note: command files classes must be placed under <code>Robo/Plugin/Commands</code> relative namespace and their name must end in <code>Command.php</code> or <code>Commands.php</code>.</p><p>You can now access your new commands via Robo:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>$ ./vendor/bin/robo</span></span>
<span class="line"><span>$ ./robo</span></span>
<span class="line"><span>Robo 1.2.2-dev</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Usage:</span></span>
<span class="line"><span>  command [options] [arguments]</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Available commands:</span></span>
<span class="line"><span>  help                  Displays help for a command</span></span>
<span class="line"><span>  list                  Lists commands</span></span>
<span class="line"><span> my-project</span></span>
<span class="line"><span>  my-project:command-one</span></span>
<span class="line"><span>  my-project:command-two</span></span></code></pre></div><h2 id="creating-a-robo-extension" tabindex="-1">Creating a Robo Extension <a class="header-anchor" href="#creating-a-robo-extension" aria-label="Permalink to “Creating a Robo Extension”">​</a></h2><p>A Robo tasks extension is created by advertising a Composer package of type <code>robo-tasks</code> on <a href="https://packagist.org/" target="_blank" rel="noreferrer">Packagist</a>. For an overview on how this is done, see the article <a href="https://knpuniversity.com/screencast/question-answer-day/create-composer-package" target="_blank" rel="noreferrer">Creating your very own Composer Package</a>. Specific instructions for creating Robo task extensions are provided below.</p><h3 id="create-your-composer-json-file" tabindex="-1">Create your composer.json File <a class="header-anchor" href="#create-your-composer-json-file" aria-label="Permalink to “Create your composer.json File”">​</a></h3><p>Your composer.json file should look something like the example below:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;name&quot;: &quot;boedah/robo-drush&quot;,</span></span>
<span class="line"><span>    &quot;description&quot;: &quot;Drush CommandStack for Robo Task Runner&quot;,</span></span>
<span class="line"><span>    &quot;type&quot;: &quot;robo-tasks&quot;,</span></span>
<span class="line"><span>    &quot;autoload&quot;: {</span></span>
<span class="line"><span>        &quot;psr-4&quot;: {</span></span>
<span class="line"><span>            &quot;Boedah\\\\Robo\\\\Task\\\\Drush\\\\&quot;: &quot;src&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;require&quot;: {</span></span>
<span class="line"><span>        &quot;php&quot;: &quot;&gt;=5.5.0&quot;,</span></span>
<span class="line"><span>        &quot;consolidation/robo&quot;: &quot;~1&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Customize the name and autoload paths as necessary, and add any additional required projects needed by the tasks that your extensions will provide. The type of your project should always be <code>robo-tasks</code>. Robo only supports php &gt;= 5.5.0; you may require a higher version of php if necessary.</p><h3 id="create-the-tasks-php-trait" tabindex="-1">Create the Tasks.php Trait <a class="header-anchor" href="#create-the-tasks-php-trait" aria-label="Permalink to “Create the Tasks.php Trait”">​</a></h3><p>It is recommended to place your trait-loading task in a <code>Tasks</code> file in the same namespace as the task implementation.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>namespace Boedah\\Robo\\Task\\Drush;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>trait Tasks</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param string $pathToDrush</span></span>
<span class="line"><span>     * @return DrushStack</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    protected function taskDrushStack($pathToDrush = &#39;drush&#39;)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        return $this-&gt;task(__FUNCTION__, $pathToDrush);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Note that the name of the service for a given task must start with the word &quot;task&quot;, and must have the same name as the function used to call the task. <code>$this-&gt;task()</code> looks up the service by name; using the PHP built-in constant <strong>FUNCTION</strong> for this parameter ensures that the names of these items remain in alignment.</p><h3 id="task-implementation" tabindex="-1">Task implementation <a class="header-anchor" href="#task-implementation" aria-label="Permalink to “Task implementation”">​</a></h3><p>The implementation of each task class should extend \\Robo\\Task\\BaseTask, or some class that extends the same, and should used chained initializer methods and defer all operations that alter the state of the system until its <code>run()</code> method. If you follow these patterns, then your task extensions will be usable via Robo collection builders, as explained in the <a href="./collections.html">collections</a> documentation.</p><p>There are many examples of task implementations in the Robo\\Task namespace. A very basic task example is provided below. The namespace is <code>MyAssetTasks</code>, and the example task is <code>CompileAssets</code>. To customize to your purposes, choose an appropriate namespace, and then define as many tasks as you need.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAssetTasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">trait</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tasks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Example task to compile assets</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> $pathToCompileAssets</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\MyAssetTasks\\CompileAssets</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> taskCompileAssets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Always construct your tasks with the \`task()\` task builder.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompileAssets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $path);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompileAssets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Robo\\Contract\\</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TaskInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // configuration params</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $path;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $to;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $path;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($filename)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $filename;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // must return $this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // must implement Run</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?&gt;</span></span></code></pre></div><p>To use the tasks you define in a RoboFile, use its <code>Tasks</code> trait as explained in the section <a href="#including-additional-tasks">Including Additional Tasks</a>, above.</p><h3 id="taskio" tabindex="-1">TaskIO <a class="header-anchor" href="#taskio" aria-label="Permalink to “TaskIO”">​</a></h3><p>To allow tasks access IO, use the <code>Robo\\Common\\TaskIO</code> trait, or inherit your task class from <code>Robo\\Task\\BaseTask</code> (recommended).</p><p>Inside tasks you should print process details with <code>printTaskInfo</code>, <code>printTaskSuccess</code>, and <code>printTaskError</code>.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>$this-&gt;printTaskInfo(&#39;Processing...&#39;);</span></span></code></pre></div><p>The Task IO methods send all output through a PSR-3 logger. Tasks should use task IO exclusively; methods such as &#39;say&#39; and &#39;ask&#39; should reside in the command method. This allows tasks to be usable in any context that has a PSR-3 logger, including background or server processes where it is not possible to directly query the user.</p><h3 id="tasks-that-use-tasks" tabindex="-1">Tasks That Use Tasks <a class="header-anchor" href="#tasks-that-use-tasks" aria-label="Permalink to “Tasks That Use Tasks”">​</a></h3><p>If one task implementation needs to use other tasks while it is running, it should do so via a <code>CollectionBuilder</code> object, as explained in the <a href="./collections.html">Collections</a> documentation.</p><p>To obtain access to a <code>CollectionBuilder</code>, a task should implement <code>BuilderAwareInterface</code> and use <code>BuilderAwareTrait</code>. It will then have access to a collection builder via the <code>$this-&gt;collectionBuilder()</code> method.</p><h3 id="testing-extensions" tabindex="-1">Testing Extensions <a class="header-anchor" href="#testing-extensions" aria-label="Permalink to “Testing Extensions”">​</a></h3><p>If you wish to use the <code>task()</code> methods from your <code>Tasks</code> trait in your unit tests, it is necessary to also use the Robo <code>TaskAccessor</code> trait, and define a <code>collectionBuilder()</code> method to provide a builder. Collection builders are used to initialize all Robo tasks. The easiest way to get a usable collection builder in your tests is to initialize Robo&#39;s default dependency injection container, and use it to request a new builder.</p><p>An example of how to do this in a PHPUnit test is shown below.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>use League\\Container\\ContainerAwareInterface;</span></span>
<span class="line"><span>use League\\Container\\ContainerAwareTrait;</span></span>
<span class="line"><span>use Symfony\\Component\\Console\\Output\\NullOutput;</span></span>
<span class="line"><span>use Robo\\TaskAccessor;</span></span>
<span class="line"><span>use Robo\\Robo;</span></span>
<span class="line"><span>use Robo\\Collection\\CollectionBuilder;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class DrushStackTest extends \\PHPUnit_Framework_TestCase implements ContainerAwareInterface</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    use \\Boedah\\Robo\\Task\\Drush\\Tasks;</span></span>
<span class="line"><span>    use TaskAccessor;</span></span>
<span class="line"><span>    use ContainerAwareTrait;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // Set up the Robo container so that we can create tasks in our tests.</span></span>
<span class="line"><span>    function setup()</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        $container = Robo::createDefaultContainer(null, new NullOutput());</span></span>
<span class="line"><span>        $this-&gt;setContainer($container);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // Scaffold the collection builder</span></span>
<span class="line"><span>    public function collectionBuilder()</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        $emptyRobofile = new \\Robo\\Tasks;</span></span>
<span class="line"><span>        return CollectionBuilder::create($this-&gt;getContainer(), $emptyRobofile);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public function testYesIsAssumed()</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        $command = $this-&gt;taskDrushStack()</span></span>
<span class="line"><span>            -&gt;drush(&#39;command&#39;)</span></span>
<span class="line"><span>            -&gt;getCommand();</span></span>
<span class="line"><span>        $this-&gt;assertEquals(&#39;drush command -y&#39;, $command);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>To assert that the output of a command contains some value, use a <code>Symfony\\Component\\Console\\Output\\BufferedOutput</code> in place of null output when calling Robo::createDefaultContainer().</p>`,50)])])}const u=a(t,[["render",p]]);export{c as __pageData,u as default};
